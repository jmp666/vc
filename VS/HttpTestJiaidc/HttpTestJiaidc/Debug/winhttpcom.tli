// Created by Microsoft (R) C/C++ Compiler Version 14.00.23506.0 (6f87a79e).
//
// d:\code\vs\httptestjiaidc\httptestjiaidc\debug\winhttpcom.tli
//
// Wrapper implementations for Win32 type library C:\\Windows\\System32\\winhttpcom.dll
// compiler-generated file created 10/10/16 at 21:20:48 - DO NOT EDIT!

#pragma once

//
// interface IWinHttpRequest wrapper method implementations
//

inline HRESULT IWinHttpRequest::SetProxy ( HTTPREQUEST_PROXY_SETTING ProxySetting, const _variant_t & ProxyServer, const _variant_t & BypassList ) {
    HRESULT _hr = raw_SetProxy(ProxySetting, ProxyServer, BypassList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWinHttpRequest::SetCredentials ( _bstr_t UserName, _bstr_t Password, HTTPREQUEST_SETCREDENTIALS_FLAGS Flags ) {
    HRESULT _hr = raw_SetCredentials(UserName, Password, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWinHttpRequest::Open ( _bstr_t Method, _bstr_t Url, const _variant_t & Async ) {
    HRESULT _hr = raw_Open(Method, Url, Async);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWinHttpRequest::SetRequestHeader ( _bstr_t Header, _bstr_t Value ) {
    HRESULT _hr = raw_SetRequestHeader(Header, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IWinHttpRequest::GetResponseHeader ( _bstr_t Header ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetResponseHeader(Header, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWinHttpRequest::GetAllResponseHeaders ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAllResponseHeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IWinHttpRequest::Send ( const _variant_t & Body ) {
    HRESULT _hr = raw_Send(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IWinHttpRequest::GetStatus ( ) {
    long _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IWinHttpRequest::GetStatusText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IWinHttpRequest::GetResponseText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IWinHttpRequest::GetResponseBody ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWinHttpRequest::GetResponseStream ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ResponseStream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t IWinHttpRequest::GetOption ( enum WinHttpRequestOption Option ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Option(Option, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IWinHttpRequest::PutOption ( enum WinHttpRequestOption Option, const _variant_t & Value ) {
    HRESULT _hr = put_Option(Option, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IWinHttpRequest::WaitForResponse ( const _variant_t & Timeout ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WaitForResponse(Timeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IWinHttpRequest::Abort ( ) {
    HRESULT _hr = raw_Abort();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWinHttpRequest::SetTimeouts ( long ResolveTimeout, long ConnectTimeout, long SendTimeout, long ReceiveTimeout ) {
    HRESULT _hr = raw_SetTimeouts(ResolveTimeout, ConnectTimeout, SendTimeout, ReceiveTimeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWinHttpRequest::SetClientCertificate ( _bstr_t ClientCertificate ) {
    HRESULT _hr = raw_SetClientCertificate(ClientCertificate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWinHttpRequest::SetAutoLogonPolicy ( enum WinHttpRequestAutoLogonPolicy AutoLogonPolicy ) {
    HRESULT _hr = raw_SetAutoLogonPolicy(AutoLogonPolicy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
