// Created by Microsoft (R) C/C++ Compiler Version 14.00.23506.0 (28a301b8).
//
// d:\code\vs\httptestidc816\httptestidc816\debug\winhttpcom.tlh
//
// C++ source equivalent of Win32 type library C:\\Windows\\System32\\winhttpcom.dll
// compiler-generated file created 10/09/16 at 22:07:17 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("662901fc-6951-4854-9eb2-d9a2570f2b2e"))
/* LIBID */ __WinHttp;
enum WinHttpRequestOption;
enum WinHttpRequestAutoLogonPolicy;
enum WinHttpRequestSslErrorFlags;
enum WinHttpRequestSecureProtocols;
struct __declspec(uuid("016fe2ec-b2c8-45f8-b23b-39e53a75396b"))
/* dual interface */ IWinHttpRequest;
struct __declspec(uuid("f97f4e15-b787-4212-80d1-d380cbbf982e"))
/* interface */ IWinHttpRequestEvents;
struct /* coclass */ WinHttpRequest;
typedef long HTTPREQUEST_PROXY_SETTING;
typedef long HTTPREQUEST_SETCREDENTIALS_FLAGS;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IWinHttpRequest, __uuidof(IWinHttpRequest));
_COM_SMARTPTR_TYPEDEF(IWinHttpRequestEvents, __uuidof(IWinHttpRequestEvents));

//
// Type library items
//

enum __declspec(uuid("12782009-fe90-4877-9730-e5e183669b19"))
WinHttpRequestOption
{
    WinHttpRequestOption_UserAgentString = 0,
    WinHttpRequestOption_URL = 1,
    WinHttpRequestOption_URLCodePage = 2,
    WinHttpRequestOption_EscapePercentInURL = 3,
    WinHttpRequestOption_SslErrorIgnoreFlags = 4,
    WinHttpRequestOption_SelectCertificate = 5,
    WinHttpRequestOption_EnableRedirects = 6,
    WinHttpRequestOption_UrlEscapeDisable = 7,
    WinHttpRequestOption_UrlEscapeDisableQuery = 8,
    WinHttpRequestOption_SecureProtocols = 9,
    WinHttpRequestOption_EnableTracing = 10,
    WinHttpRequestOption_RevertImpersonationOverSsl = 11,
    WinHttpRequestOption_EnableHttpsToHttpRedirects = 12,
    WinHttpRequestOption_EnablePassportAuthentication = 13,
    WinHttpRequestOption_MaxAutomaticRedirects = 14,
    WinHttpRequestOption_MaxResponseHeaderSize = 15,
    WinHttpRequestOption_MaxResponseDrainSize = 16,
    WinHttpRequestOption_EnableHttp1_1 = 17,
    WinHttpRequestOption_EnableCertificateRevocationCheck = 18,
    WinHttpRequestOption_RejectUserpwd = 19
};

enum __declspec(uuid("9d8a6df8-13de-4b1f-a330-67c719d62514"))
WinHttpRequestAutoLogonPolicy
{
    AutoLogonPolicy_Always = 0,
    AutoLogonPolicy_OnlyIfBypassProxy = 1,
    AutoLogonPolicy_Never = 2
};

enum __declspec(uuid("152a1ca2-55a9-43a3-b187-0605bb886349"))
WinHttpRequestSslErrorFlags
{
    SslErrorFlag_UnknownCA = 256,
    SslErrorFlag_CertWrongUsage = 512,
    SslErrorFlag_CertCNInvalid = 4096,
    SslErrorFlag_CertDateInvalid = 8192,
    SslErrorFlag_Ignore_All = 13056
};

enum __declspec(uuid("6b2c51c1-a8ea-46bd-b928-c9b76f9f14dd"))
WinHttpRequestSecureProtocols
{
    SecureProtocol_SSL2 = 8,
    SecureProtocol_SSL3 = 32,
    SecureProtocol_TLS1 = 128,
    SecureProtocol_TLS1_1 = 512,
    SecureProtocol_TLS1_2 = 2048,
    SecureProtocol_ALL = 168
};

struct __declspec(uuid("016fe2ec-b2c8-45f8-b23b-39e53a75396b"))
IWinHttpRequest : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOption,put=PutOption))
    _variant_t Option[];
    __declspec(property(get=GetStatus))
    long Status;
    __declspec(property(get=GetStatusText))
    _bstr_t StatusText;
    __declspec(property(get=GetResponseText))
    _bstr_t ResponseText;
    __declspec(property(get=GetResponseBody))
    _variant_t ResponseBody;
    __declspec(property(get=GetResponseStream))
    _variant_t ResponseStream;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetProxy (
        HTTPREQUEST_PROXY_SETTING ProxySetting,
        const _variant_t & ProxyServer = vtMissing,
        const _variant_t & BypassList = vtMissing );
    HRESULT SetCredentials (
        _bstr_t UserName,
        _bstr_t Password,
        HTTPREQUEST_SETCREDENTIALS_FLAGS Flags );
    HRESULT Open (
        _bstr_t Method,
        _bstr_t Url,
        const _variant_t & Async = vtMissing );
    HRESULT SetRequestHeader (
        _bstr_t Header,
        _bstr_t Value );
    _bstr_t GetResponseHeader (
        _bstr_t Header );
    _bstr_t GetAllResponseHeaders ( );
    HRESULT Send (
        const _variant_t & Body = vtMissing );
    long GetStatus ( );
    _bstr_t GetStatusText ( );
    _bstr_t GetResponseText ( );
    _variant_t GetResponseBody ( );
    _variant_t GetResponseStream ( );
    _variant_t GetOption (
        enum WinHttpRequestOption Option );
    void PutOption (
        enum WinHttpRequestOption Option,
        const _variant_t & Value );
    VARIANT_BOOL WaitForResponse (
        const _variant_t & Timeout = vtMissing );
    HRESULT Abort ( );
    HRESULT SetTimeouts (
        long ResolveTimeout,
        long ConnectTimeout,
        long SendTimeout,
        long ReceiveTimeout );
    HRESULT SetClientCertificate (
        _bstr_t ClientCertificate );
    HRESULT SetAutoLogonPolicy (
        enum WinHttpRequestAutoLogonPolicy AutoLogonPolicy );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetProxy (
        /*[in]*/ HTTPREQUEST_PROXY_SETTING ProxySetting,
        /*[in]*/ VARIANT ProxyServer = vtMissing,
        /*[in]*/ VARIANT BypassList = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetCredentials (
        /*[in]*/ BSTR UserName,
        /*[in]*/ BSTR Password,
        /*[in]*/ HTTPREQUEST_SETCREDENTIALS_FLAGS Flags ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR Method,
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT Async = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetRequestHeader (
        /*[in]*/ BSTR Header,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetResponseHeader (
        /*[in]*/ BSTR Header,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetAllResponseHeaders (
        /*[out,retval]*/ BSTR * Headers ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ VARIANT Body = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ long * Status ) = 0;
      virtual HRESULT __stdcall get_StatusText (
        /*[out,retval]*/ BSTR * Status ) = 0;
      virtual HRESULT __stdcall get_ResponseText (
        /*[out,retval]*/ BSTR * Body ) = 0;
      virtual HRESULT __stdcall get_ResponseBody (
        /*[out,retval]*/ VARIANT * Body ) = 0;
      virtual HRESULT __stdcall get_ResponseStream (
        /*[out,retval]*/ VARIANT * Body ) = 0;
      virtual HRESULT __stdcall get_Option (
        /*[in]*/ enum WinHttpRequestOption Option,
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Option (
        /*[in]*/ enum WinHttpRequestOption Option,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_WaitForResponse (
        /*[in]*/ VARIANT Timeout,
        /*[out,retval]*/ VARIANT_BOOL * Succeeded ) = 0;
      virtual HRESULT __stdcall raw_Abort ( ) = 0;
      virtual HRESULT __stdcall raw_SetTimeouts (
        /*[in]*/ long ResolveTimeout,
        /*[in]*/ long ConnectTimeout,
        /*[in]*/ long SendTimeout,
        /*[in]*/ long ReceiveTimeout ) = 0;
      virtual HRESULT __stdcall raw_SetClientCertificate (
        /*[in]*/ BSTR ClientCertificate ) = 0;
      virtual HRESULT __stdcall raw_SetAutoLogonPolicy (
        /*[in]*/ enum WinHttpRequestAutoLogonPolicy AutoLogonPolicy ) = 0;
};

struct __declspec(uuid("f97f4e15-b787-4212-80d1-d380cbbf982e"))
IWinHttpRequestEvents : IUnknown
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall OnResponseStart (
        /*[in]*/ long Status,
        /*[in]*/ BSTR ContentType ) = 0;
      virtual void __stdcall OnResponseDataAvailable (
        /*[in]*/ SAFEARRAY * * Data ) = 0;
      virtual void __stdcall OnResponseFinished ( ) = 0;
      virtual void __stdcall OnError (
        /*[in]*/ long ErrorNumber,
        /*[in]*/ BSTR ErrorDescription ) = 0;
};

struct __declspec(uuid("2087c2f4-2cef-4953-a8ab-66779b670495"))
WinHttpRequest;
    // [ default ] interface IWinHttpRequest
    // [ default, source ] interface IWinHttpRequestEvents

//
// Wrapper method implementations
//

#include "d:\code\vs\httptestidc816\httptestidc816\debug\winhttpcom.tli"

#pragma pack(pop)
